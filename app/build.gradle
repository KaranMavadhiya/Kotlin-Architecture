apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {

    signingConfigs {
        release
    }

    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        applicationId "com.kotlin.architecture"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName
    }

    buildTypes {
        debug {
            applicationIdSuffix ".development"
            resValue "string", "app_name", "Kotlin(Dev)"

            buildConfigField "String", "API_BASE_URL", API_DEVELOPMENT_URL
            // Update API_DEVELOPMENT_URL into gradle.properties

            minifyEnabled false
        }
        release {
            resValue "string", "app_name", "Kotlin"

            // Enables code shrinking, obfuscation, and optimization for only your project's release build type.
            minifyEnabled true

            // Enables resource shrinking, which is performed by the Android Gradle plugin.
            shrinkResources false

            signingConfig signingConfigs.release

            buildConfigField "String", "API_BASE_URL", API_LIVE_URL
            // Update API_LIVE_URL into gradle.properties

            // Includes the default ProGuard rules files that are packaged with
            // the Android Gradle plugin. To learn more, go to the section about
            // R8 configuration files.
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    dynamicFeatures = [':registration']

}

dependencies {
    api project(path: ':network')

    implementation fileTree(dir: "libs", include: ["*.jar"])

    // Kotlin core and ktx
    api "androidx.core:core-ktx:$ktx_version"
    api "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    // ViewModel
    api "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    // LiveData
    api "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    // Lifecycle only (without ViewModel or LiveData)
    api "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"

    // Saved state module for ViewModel
    api "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"

    // alternately - if using Java8, use the following instead of lifecycle-compiler
    api "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    // Navigation
    api "androidx.navigation:navigation-fragment-ktx:$nav_version"
    api "androidx.navigation:navigation-ui-ktx:$nav_version"

    // Dynamic Feature Module Support
    api "androidx.navigation:navigation-dynamic-features-fragment:$nav_version"

    // Material Design and Androidx Appcompat
    api "com.google.android.material:material:$material_version"
    api "androidx.appcompat:appcompat:$appcompact_version"

    // Constraint Layout
    api "androidx.constraintlayout:constraintlayout:$constraint_layout_version"

    // SSP for font size
    api 'com.intuit.ssp:ssp-android:1.0.6'
    // SDP for spacing
    api 'com.intuit.sdp:sdp-android:1.0.6'
}

def keystorePropertiesFile = new File('keystore.properties')
def keystoreProperties = new Properties()

if (keystorePropertiesFile.canRead()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

    if (keystoreProperties != null && keystoreProperties.containsKey('STORE_FILE') && keystoreProperties.containsKey('KEY_ALIAS') && keystoreProperties.containsKey('PASSWORD')) {
        android.signingConfigs.release.storeFile = file(keystoreProperties['STORE_FILE'])
        android.signingConfigs.release.storePassword = keystoreProperties['PASSWORD']
        android.signingConfigs.release.keyAlias = keystoreProperties['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = keystoreProperties['PASSWORD']
    } else {
        println 'signing.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }

} else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
}
